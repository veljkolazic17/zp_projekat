# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\src\ui\privateKeyRing.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QAbstractItemView, QDialog, QTableWidgetItem, QDialogButtonBox, QVBoxLayout, QLabel, QHeaderView, QMessageBox,QLineEdit, QFormLayout, QRadioButton, QGroupBox
import globals
import sys
sys.path.insert(1, 'src/pgp')
import User
sys.path.append('..')

class Ui_privateKeyRing(object):


    def __init__(self) -> None:
        self.list_private = globals.pgp.privateKeyRing.listify()


    def setupUi(self, privateKeyRing):
        privateKeyRing.setObjectName("privateKeyRing")
        privateKeyRing.resize(800, 600)
        self.importKeysBtn = QtWidgets.QPushButton(privateKeyRing)
        self.importKeysBtn.setGeometry(QtCore.QRect(670, 430, 120, 40))
        self.deleteKeyBtn = QtWidgets.QPushButton(privateKeyRing)
        self.deleteKeyBtn.setGeometry(QtCore.QRect(15, 430, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.importKeysBtn.setFont(font)
        self.importKeysBtn.setObjectName("importKeysBtn")
        self.deleteKeyBtn.setFont(font)
        self.deleteKeyBtn.setObjectName("deleteKeyBtn")
        self.importKeysBtn.clicked.connect(self.button_handler_import_keys)
        self.exportPublicKeyBtn = QtWidgets.QPushButton(privateKeyRing)
        self.exportPublicKeyBtn.setGeometry(QtCore.QRect(479, 430, 171, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.exportPublicKeyBtn.setFont(font)
        self.exportPublicKeyBtn.setObjectName("exportPublicKeyBtn")
        self.exportPublicKeyBtn.clicked.connect(self.button_handler_export_public_key)
        self.back = QtWidgets.QPushButton(privateKeyRing)
        self.back.setGeometry(QtCore.QRect(30, 540, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.back.setFont(font)
        self.back.setObjectName("back")
        self.back.clicked.connect(self.button_handler_back)
        self.tableWidget = QtWidgets.QTableWidget(privateKeyRing)
        self.tableWidget.setGeometry(QtCore.QRect(10, 100, 781, 321))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(globals.pgp.privateKeyRing.size)
        self.label_2 = QtWidgets.QLabel(privateKeyRing)
        self.label_2.setGeometry(QtCore.QRect(150, 20, 501, 61))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.exportPrivateKeyBtn = QtWidgets.QPushButton(privateKeyRing)
        self.exportPrivateKeyBtn.setGeometry(QtCore.QRect(290, 430, 171, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.deleteKeyBtn.clicked.connect(self.button_handler_delete)
        self.exportPrivateKeyBtn.setFont(font)
        self.exportPrivateKeyBtn.setObjectName("exportPrivateKeyBtn")
        self.exportPrivateKeyBtn.clicked.connect(self.button_handler_export_private_key)
        self.generateKeys = QtWidgets.QPushButton(privateKeyRing)
        self.generateKeys.setGeometry(QtCore.QRect(100, 430, 171, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.generateKeys.setFont(font)
        self.generateKeys.setObjectName("generateKeys")
        self.generateKeys.clicked.connect(self.button_handler_import_generate_key_pair)

        self.retranslateUi(privateKeyRing)
        QtCore.QMetaObject.connectSlotsByName(privateKeyRing)
        #Generate Table

        header = self.tableWidget.horizontalHeader()       
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)


        self.tableWidget.cellClicked.connect(self.get_clicked_row)

        self.tableWidget.setHorizontalHeaderLabels([
            "Timestamp",
            "KeyID",
            "User ID",
            "Algo Type",
            "Key Size"
        ])
        for i in range(globals.pgp.privateKeyRing.size):
            secondList = [self.list_private[i].timestamp, self.list_private[i].keyID.hex(), self.list_private[i].userID, self.list_private[i].algoTypeAsym, self.list_private[i].keySizeAsym.value]
            for j in range(5):
                self.tableWidget.setItem(i,j, QTableWidgetItem(str(secondList[j])))

            # if globals.algoAsymEncryption and secondList[3].value != globals.algoAsymEncryption.value:
            #     self.tableWidget.hideRow(i)

        self.tableWidget.resizeColumnsToContents()

        if globals.previousRowPrivate != None:
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(globals.previousRowPrivate, j).setBackground(QColor(0, 200, 0))
        

    def button_handler_export_public_key(self):
        dlg = QMessageBox(globals.currentWindow)
        if globals.privateKeyEntry:
            filePath, enteredFileName = QtWidgets.QInputDialog.getText(globals.currentWindow, 'File Path', 'Enter file path:')
            if enteredFileName:
                try:
                    globals.pgp.privateKeyRing.exportPublicKey(filePath=filePath ,keyID=globals.privateKeyEntry.keyID)
                    dlg.setWindowTitle("SUCCESS!")
                    dlg.setText("EXPORTED KEY!")
                except:
                    dlg.setWindowTitle("FILE PATH ERROR!")
                    dlg.setText("INVALID FILE PATH!")
                dlg.exec()

        else:
            dlg.setWindowTitle("KEY ERROR!")
            dlg.setText("NO KEY SELECTED!")
        
            dlg.exec()
    
    def get_clicked_row(self, row, column):
        if globals.previousRowPrivate != None:
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(globals.previousRowPrivate, j).setBackground(QColor(255, 255, 255))
        globals.privateKeyEntry = self.list_private[row]
        for j in range(self.tableWidget.columnCount()):
            self.tableWidget.item(row, j).setBackground(QColor(0, 200, 0))
        globals.previousRowPrivate = row

    
    def button_handler_export_private_key(self):
        dlg = QMessageBox(globals.currentWindow)
        if globals.privateKeyEntry:
            dlg2 = QDialog(globals.currentWindow)
            dlg2.filePath = QLineEdit(dlg2)
            dlg2.password = QLineEdit(dlg2)
            buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, dlg)
            layout = QFormLayout(dlg2)
            layout.addRow("File Path", dlg2.filePath)
            layout.addRow("Password", dlg2.password)
            layout.addWidget(buttonBox)
            buttonBox.accepted.connect(lambda : self.export_key(dlg=dlg2))
            buttonBox.rejected.connect(dlg2.reject)
            dlg2.exec()

        else:
            dlg.setWindowTitle("KEY ERROR!")
            dlg.setText("NO KEY SELECTED!")
            dlg.exec()
       

    def button_handler_delete(self):
        if globals.privateKeyEntry:
            globals.pgp.privateKeyRing.deleteEntryByKeyID(globals.privateKeyEntry.keyID)
            self.tableWidget.setRowCount(self.tableWidget.rowCount() - 1)
            self.list_private = globals.pgp.privateKeyRing.listify()
            globals.previousRowPrivate = None
            globals.privateKeyEntry = None
            for i in range(globals.pgp.privateKeyRing.size):
                secondList = [self.list_private[i].timestamp, self.list_private[i].keyID.hex(), self.list_private[i].userID, self.list_private[i].algoTypeAsym, self.list_private[i].keySizeAsym.value]
                for j in range(5):
                    self.tableWidget.setItem(i,j, QTableWidgetItem(str(secondList[j])))


            

        


    def export_key(self, dlg):
        if dlg.filePath.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("ENTER FILE PATH!")
            msg.exec()
            return
        try:                  
            globals.pgp.privateKeyRing.exportPrivateKey(filePath=dlg.filePath.text() ,keyID=globals.privateKeyEntry.keyID, password=dlg.password.text())
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("SUCCESS!")
            msg.setText("EXPORTED KEY!")
            dlg.close()
            msg.exec()
            
        except KeyError as e:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("KEY ERROR!")
            msg.setText(str(e)[1:-1])
            msg.exec()
            return
        except:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("INVALID FILE PATH!")
            msg.exec()
            return



    def button_handler_import_keys(self):
        dlg = QDialog(globals.currentWindow)
        
        dlg.filePathPublic = QLineEdit(dlg)
        dlg.filePathPrivate = QLineEdit(dlg)
        dlg.email = QLineEdit(dlg)
        dlg.password = QLineEdit(dlg)
        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, dlg)

        layout = QFormLayout(dlg)
        layout.addRow("Public Key File Path", dlg.filePathPublic)
        layout.addRow("Private Key File Path", dlg.filePathPrivate)
        layout.addRow("Email", dlg.email)
        layout.addRow("Password", dlg.password)
        layout.addWidget(buttonBox)

        buttonBox.accepted.connect(lambda : self.import_key(dlg=dlg))
        buttonBox.rejected.connect(dlg.reject)

        dlg.exec()



    def import_key(self,dlg):
        if dlg.filePathPublic.text() == "" or dlg.filePathPrivate.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("ENTER FILE PATH!")
            msg.exec()
            return
        if dlg.email.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("USER ID ERROR!")
            msg.setText("ENTER EMAIL!")
            msg.exec()
            return
        try:
            retValue = globals.pgp.privateKeyRing.importPrivateKey(filepathPublicKey=dlg.filePathPublic.text(), filepathPrivateKey=dlg.filePathPrivate.text(), userID=dlg.email.text(), password=dlg.password.text())
            self.tableWidget.setRowCount(self.tableWidget.rowCount() + 1)
            
            secondList = [retValue.timestamp, retValue.keyID.hex(), retValue.userID, retValue.algoTypeAsym, retValue.keySizeAsym.value]
            for j in range(5):
                self.tableWidget.setItem(self.tableWidget.rowCount() - 1, j , QTableWidgetItem(str(secondList[j])))
            self.list_private.append(retValue)
            dlg.close()


        except KeyError as e:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("KEY ERROR!")
            msg.setText(str(e)[1:-1])
            msg.exec()
            return
        except:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("INVALID FILE PATH!")
            msg.exec()
            return
        
    def generate_key_pair(self, dlg):
        if dlg.email.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("USER ID ERROR!")
            msg.setText("ENTER EMAIL!")
            msg.exec()
            return
        if dlg.radioRSA.isChecked():
            algoTypeAsym = User.AlgoTypeAsym.RSA
        elif dlg.radioDSA.isChecked():
            algoTypeAsym = User.AlgoTypeAsym.DSA
        else:
            algoTypeAsym = User.AlgoTypeAsym.ELGAMAL

        if dlg.radioKEY1024.isChecked():
            keySizeAsym = User.KeySizeAsym.KEY1024
        else:
            keySizeAsym = User.KeySizeAsym.KEY2048
        
        userData = User.UserData()
        userData.mail = dlg.email.text()
        userData.password = dlg.password.text()

        retValue = globals.pgp.privateKeyRing.generateKeyPair(algoTypeAsym=algoTypeAsym, keySizeAsym=keySizeAsym, userData=userData)
        self.tableWidget.setRowCount(self.tableWidget.rowCount() + 1)
            
        secondList = [retValue.timestamp, retValue.keyID.hex(), retValue.userID, retValue.algoTypeAsym, retValue.keySizeAsym.value]
        for j in range(5):
            self.tableWidget.setItem(self.tableWidget.rowCount() - 1, j , QTableWidgetItem(str(secondList[j])))
        self.list_private.append(retValue)
        dlg.close()

    def button_handler_import_generate_key_pair(self):
        dlg = QDialog(globals.currentWindow)
                
        # Algo Type
        dlg.boxAlgo = QVBoxLayout()
        dlg.groupboxAlgo = QGroupBox("Algorithm")
        dlg.radioRSA = QRadioButton()
        dlg.radioRSA.setText("RSA")

        dlg.radioRSA.setChecked(True)

        dlg.radioDSA = QRadioButton()
        dlg.radioDSA.setText("DSA")

        dlg.radioELGAMAL = QRadioButton()
        dlg.radioELGAMAL.setText("ELGAMAL")

        dlg.boxAlgo.addWidget(dlg.radioRSA)
        dlg.boxAlgo.addWidget(dlg.radioDSA)
        dlg.boxAlgo.addWidget(dlg.radioELGAMAL)
        dlg.groupboxAlgo.setLayout(dlg.boxAlgo)

        # Key Size
        dlg.boxKeySize = QVBoxLayout()
        dlg.groupboxKeySize = QGroupBox("Key Size")

        dlg.radioKEY1024 = QRadioButton()
        dlg.radioKEY1024.setText("1024 bits")

        dlg.radioKEY1024.setChecked(True)
        
        dlg.radioKEY2048 = QRadioButton()
        dlg.radioKEY2048.setText("2048 bits")
        
        dlg.boxKeySize.addWidget(dlg.radioKEY1024)
        dlg.boxKeySize.addWidget(dlg.radioKEY2048)

        dlg.groupboxKeySize.setLayout(dlg.boxKeySize)

        # Layout
        dlg.email = QLineEdit(dlg)
        dlg.password = QLineEdit(dlg)
        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, dlg)

        layout = QFormLayout(dlg)
        layout.addRow("Email", dlg.email)
        layout.addRow("Password", dlg.password)
        layout.addRow(dlg.groupboxAlgo)
        layout.addRow(dlg.groupboxKeySize)
        layout.addWidget(buttonBox)

        buttonBox.accepted.connect(lambda : self.generate_key_pair(dlg=dlg))
        buttonBox.rejected.connect(dlg.reject)

        dlg.exec()




    def retranslateUi(self, privateKeyRing):
        _translate = QtCore.QCoreApplication.translate
        privateKeyRing.setWindowTitle(_translate("privateKeyRing", "Form"))
        self.deleteKeyBtn.setText(_translate("privateKeyRing", "Delete"))
        self.importKeysBtn.setText(_translate("privateKeyRing", "Import Keys"))
        self.exportPublicKeyBtn.setText(_translate("privateKeyRing", "Export Public Key"))
        self.back.setText(_translate("privateKeyRing", "Back"))
        self.label_2.setText(_translate("privateKeyRing", "Private Key Ring"))
        self.exportPrivateKeyBtn.setText(_translate("privateKeyRing", "Export Private Key"))
        self.generateKeys.setText(_translate("privateKeyRing", "Generate Key Pair"))


    def button_handler_back(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = homeUI()
        self.ui.setupUi(self.window)
        globals.currentWindow.hide()
        globals.currentWindow = self.window
        self.window.show()

 

from home import Ui_Form as homeUI