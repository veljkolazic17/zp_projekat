# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\src\ui\publicKeyRing.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtWidgets import QAbstractItemView, QDialog, QTableWidgetItem, QDialogButtonBox, QVBoxLayout, QLabel, QHeaderView, QMessageBox,QLineEdit, QFormLayout
import globals

class Ui_publicKeyRing(object):

    def __init__(self) -> None:
        self.list_public = globals.pgp.publicKeyRing.listify()


    def setupUi(self, publicKeyRing):
        publicKeyRing.setObjectName("publicKeyRing")
        publicKeyRing.resize(800, 600)
        self.tableWidget = QtWidgets.QTableWidget(publicKeyRing)
        self.tableWidget.setGeometry(QtCore.QRect(10, 100, 781, 321))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(globals.pgp.publicKeyRing.size)
        self.label = QtWidgets.QLabel(publicKeyRing)
        self.label.setGeometry(QtCore.QRect(150, 20, 501, 61))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.back = QtWidgets.QPushButton(publicKeyRing)
        self.back.setGeometry(QtCore.QRect(30, 540, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.back.setFont(font)
        self.back.setObjectName("back")
        self.importKey = QtWidgets.QPushButton(publicKeyRing)
        self.importKey.setGeometry(QtCore.QRect(670, 430, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.importKey.setFont(font)
        self.importKey.setObjectName("importKey")
        self.importKey_2 = QtWidgets.QPushButton(publicKeyRing)
        self.importKey_2.setGeometry(QtCore.QRect(530, 430, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.importKey_2.setFont(font)
        self.importKey_2.setObjectName("importKey_2")

        self.retranslateUi(publicKeyRing)
        QtCore.QMetaObject.connectSlotsByName(publicKeyRing)

    def retranslateUi(self, publicKeyRing):
        _translate = QtCore.QCoreApplication.translate
        publicKeyRing.setWindowTitle(_translate("publicKeyRing", "Form"))
        self.label.setText(_translate("publicKeyRing", "Public Key Ring"))
        self.back.setText(_translate("publicKeyRing", "Back"))
        self.importKey.setText(_translate("publicKeyRing", "Import Key"))
        self.importKey_2.setText(_translate("publicKeyRing", "Export Key"))
        self.back.clicked.connect(self.button_handler_back)

        self.importKey.clicked.connect(self.button_handler_import_key)
        self.importKey_2.clicked.connect(self.button_handler_export_key)

        #Generate Table

        header = self.tableWidget.horizontalHeader()       
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)


        self.tableWidget.cellClicked.connect(self.get_clicked_row)

        self.tableWidget.setHorizontalHeaderLabels([
            "Timestamp",
            "KeyID",
            "User ID",
            "Algo Type",
            "Key Size"
        ])
        for i in range(globals.pgp.publicKeyRing.size):
            secondList = [self.list_public[i].timestamp, self.list_public[i].keyID.hex(), self.list_public[i].userID, self.list_public[i].algoTypeAsym, self.list_public[i].keySizeAsym.value]
            for j in range(5):
                self.tableWidget.setItem(i,j, QTableWidgetItem(str(secondList[j])))

            if globals.algoAsymEncryption and secondList[3].value != globals.algoAsymEncryption.value:
                self.tableWidget.hideRow(i)

        self.tableWidget.resizeColumnsToContents()

        if globals.previousRowPublic != None:
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(globals.previousRowPublic, j).setBackground(QColor(0, 200, 0))

    def button_handler_back(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = homeUI()
        self.ui.setupUi(self.window)
        globals.currentWindow.hide()
        globals.currentWindow = self.window
        self.window.show()

    def button_handler_import_key(self):
        dlg = QDialog(globals.currentWindow)
        
        
        dlg.filePath = QLineEdit(dlg)
        dlg.email = QLineEdit(dlg)
        buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, dlg);

        layout = QFormLayout(dlg)
        layout.addRow("File Path", dlg.filePath)
        layout.addRow("Email", dlg.email)
        layout.addWidget(buttonBox)

        buttonBox.accepted.connect(lambda : self.import_key(dlg=dlg))
        buttonBox.rejected.connect(dlg.reject)

        dlg.exec()
        
       
    def import_key(self,dlg):
        if dlg.filePath.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("ENTER FILE PATH!")
            msg.exec()
            return
        if dlg.email.text() == "":
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("USER ID ERROR!")
            msg.setText("ENTER EMAIL!")
            msg.exec()
            return
        try:
            retValue = globals.pgp.publicKeyRing.importPublicKey(filepath=dlg.filePath.text(), userID=dlg.email.text())
            self.tableWidget.setRowCount(self.tableWidget.rowCount() + 1)
            
            secondList = [retValue.timestamp, retValue.keyID.hex(), retValue.userID, retValue.algoTypeAsym, retValue.keySizeAsym.value]
            for j in range(5):
                self.tableWidget.setItem(self.tableWidget.rowCount() - 1, j , QTableWidgetItem(str(secondList[j])))
            self.list_public.append(retValue)
            dlg.close()


        except KeyError as e:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("KEY ERROR!")
            msg.setText(str(e)[1:-1])
            msg.exec()
            return
        except:
            msg = QMessageBox(globals.currentWindow)
            msg.setWindowTitle("FILE PATH ERROR!")
            msg.setText("INVALID FILE PATH!")
            msg.exec()
            return
        
        

    def button_handler_export_key(self):
        dlg = QMessageBox(globals.currentWindow)
        if globals.publicKeyEntry:
            filePath, enteredFileName = QtWidgets.QInputDialog.getText(globals.currentWindow, 'File Path', 'Enter file path:')
            if enteredFileName:
                try:
                    globals.pgp.publicKeyRing.exportPublicKey(filePath=filePath ,keyID=globals.publicKeyEntry.keyID)
                    dlg.setWindowTitle("SUCCESS!")
                    dlg.setText("EXPORTED KEY!")
                except:
                    dlg.setWindowTitle("FILE PATH ERROR!")
                    dlg.setText("INVALID FILE PATH!")
                dlg.exec()

        else:
            dlg.setWindowTitle("KEY ERROR!")
            dlg.setText("NO KEY SELECTED!")
        
            dlg.exec()
    
    def get_clicked_row(self, row, column):
        if globals.previousRowPublic != None:
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(globals.previousRowPublic, j).setBackground(QColor(255, 255, 255))
        globals.publicKeyEntry = self.list_public[row]
        for j in range(self.tableWidget.columnCount()):
            self.tableWidget.item(row, j).setBackground(QColor(0, 200, 0))
        globals.previousRowPublic = row




from home import Ui_Form as homeUI