# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\src\ui\keySelection.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
import globals
from PyQt5.QtWidgets import QAbstractItemView, QDialog, QTableWidgetItem, QDialogButtonBox, QVBoxLayout, QLabel
class Ui_Form(object):



    def __init__(self) -> None:
        self.list_private = globals.pgp.privateKeyRing.listify()
        self.list_public = globals.pgp.publicKeyRing.listify()
        

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setEnabled(True)
        Form.resize(800, 600)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(40, 60, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(450, 60, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.privateKeys = QtWidgets.QTableWidget(Form)
        self.privateKeys.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        
        self.privateKeys.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.privateKeys.setSelectionBehavior(QAbstractItemView.SelectRows)
        if not globals.pgpOptions.signature:
            self.privateKeys.setEnabled(False)
        self.privateKeys.setGeometry(QtCore.QRect(40, 110, 300, 411))
        self.privateKeys.setObjectName("privateKeys")
        self.privateKeys.setColumnCount(5)
        self.privateKeys.setRowCount(globals.pgp.privateKeyRing.size)
        self.publicKeys = QtWidgets.QTableWidget(Form)
        self.publicKeys.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.publicKeys.resizeColumnsToContents()
        self.publicKeys.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.publicKeys.setSelectionBehavior(QAbstractItemView.SelectRows)
        if not globals.pgpOptions.encryption:
            self.publicKeys.setEnabled(False)
        self.publicKeys.setGeometry(QtCore.QRect(450, 110, 300, 411))
        self.publicKeys.setObjectName("publicKeys")
        self.publicKeys.setColumnCount(5)
        self.publicKeys.setRowCount(globals.pgp.publicKeyRing.size)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(20, 540, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(660, 540, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def button_handler_sendMessageBack(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = algoUI()
        self.ui.setupUi(self.window)
        globals.currentWindow.hide()
        globals.currentWindow = self.window
        self.window.show()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Private Key Selection"))
        self.label_2.setText(_translate("Form", "Public Key Selection"))
        self.pushButton.setText(_translate("Form", "Back"))
        self.pushButton.clicked.connect(self.button_handler_sendMessageBack)
        self.pushButton_2.setText(_translate("Form", "Next"))
        self.pushButton_2.clicked.connect(self.button_handler_next)

        self.privateKeys.cellClicked.connect(self.get_clicked_row_private)
        self.publicKeys.cellClicked.connect(self.get_clicked_row_public)

        
        self.privateKeys.setHorizontalHeaderLabels([
            "Timestamp",
            "KeyID",
            "User ID",
            "Algo Type",
            "Key Size"
        ])
        for i in range(globals.pgp.privateKeyRing.size):
            secondList = [self.list_private[i].timestamp, self.list_private[i].keyID.hex(), self.list_private[i].userID, self.list_private[i].algoTypeAsym, self.list_private[i].keySizeAsym.value]
            for j in range(5):
                self.privateKeys.setItem(i,j, QTableWidgetItem(str(secondList[j])))
        self.privateKeys.resizeColumnsToContents()
        
        self.publicKeys.setHorizontalHeaderLabels([
            "Timestamp",
            "KeyID",
            "User ID",
            "Algo Type",
            "Key Size"
        ])
        for i in range(globals.pgp.publicKeyRing.size):
            secondList = [self.list_public[i].timestamp, self.list_public[i].keyID.hex(), self.list_public[i].userID, self.list_public[i].algoTypeAsym, self.list_public[i].keySizeAsym.value]
            for j in range(5):
                self.publicKeys.setItem(i,j, QTableWidgetItem(str(secondList[j])))
        self.publicKeys.resizeColumnsToContents()
        if globals.previousRowPrivate != None:
            for j in range(self.privateKeys.columnCount()):
                self.privateKeys.item(globals.previousRowPrivate, j).setBackground(QColor(0, 200, 0))
        if globals.previousRowPublic != None:
            for j in range(self.publicKeys.columnCount()):
                self.publicKeys.item(globals.previousRowPublic, j).setBackground(QColor(0, 200, 0))
                
    def button_handler_next(self):
        if (globals.privateKeyEntry == None and globals.pgpOptions.signature == True) or (globals.publicKeyEntry == None and globals.pgpOptions.encryption == True):
            
            dlg = QDialog(globals.currentWindow)

            dlg.setWindowTitle("KEY ERROR!")

            QBtn = QDialogButtonBox.Ok | QDialogButtonBox.Cancel

            dlg.buttonBox = QDialogButtonBox(QBtn)
            dlg.buttonBox.accepted.connect(dlg.accept)
            dlg.buttonBox.rejected.connect(dlg.reject)

            dlg.layout = QVBoxLayout()
            message = QLabel("PLEASE SELECT KEYS!")
            dlg.layout.addWidget(message)
            dlg.layout.addWidget(dlg.buttonBox)
            dlg.setLayout(dlg.layout)
            dlg.exec()
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui = summaryUI()
            self.ui.setupUi(self.window)
            globals.currentWindow.hide()
            globals.currentWindow = self.window
            self.window.show()

    def button_handler_back(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = algoUI()
        self.ui.setupUi(self.window)
        globals.currentWindow.hide()
        globals.currentWindow = self.window
        self.window.show()

    
    def get_clicked_row_private(self, row, column):
        if globals.previousRowPrivate != None:
            for j in range(self.privateKeys.columnCount()):
                self.privateKeys.item(globals.previousRowPrivate, j).setBackground(QColor(255, 255, 255))
        globals.privateKeyEntry = self.list_private[row]
        for j in range(self.privateKeys.columnCount()):
            self.privateKeys.item(row, j).setBackground(QColor(0, 200, 0))
        globals.previousRowPrivate = row


    def get_clicked_row_public(self, row, column):
        if globals.previousRowPublic != None:
            for j in range(self.publicKeys.columnCount()):
                self.publicKeys.item(globals.previousRowPublic, j).setBackground(QColor(255, 255, 255))
        globals.publicKeyEntry = self.list_public[row]
        for j in range(self.publicKeys.columnCount()):
            self.publicKeys.item(row, j).setBackground(QColor(0, 200, 0))
        globals.previousRowPublic = row

from algorithmChoice import Ui_AlgorithmForm as algoUI
from summaryPage import Ui_summaryPage as summaryUI
